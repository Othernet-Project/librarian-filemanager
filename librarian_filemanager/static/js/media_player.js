// Generated by CoffeeScript 1.10.0
(function(window, $, templates) {
  'use strict';
  var currentItemClass, detailUnits, mediaPlayer, selectors;
  currentItemClass = 'playlist-list-item-current';
  selectors = {
    itemSelector: '#playlist-list .playlist-list-item',
    currentItemClass: currentItemClass,
    currentItemSelector: '.' + currentItemClass
  };
  detailUnits = {
    'title': '.playlist-item-title',
    'artist': '.playlist-item-artist',
    'author': '.playlist-item-author',
    'description': '.playlist-item-description'
  };
  mediaPlayer = {
    initialize: function(container, features, callbacks) {
      var defaultCallbacks;
      this.container = container;
      defaultCallbacks = {
        setCurrent: (function(_this) {
          return function(current, previous) {
            _this.onSetCurrent(current, previous);
          };
        })(this)
      };
      this.options = $.extend({}, selectors, features, defaultCallbacks, callbacks);
      this.details = (container.find('#playlist-metadata')).first();
      this.readyPlayer();
    },
    onPlayerReady: function(mediaElement) {
      this.player = mediaElement;
      ($(window)).on('views-sidebar-toggled', (function(_this) {
        return function() {
          _this.sidebarToggled();
        };
      })(this));
      this.playlist = new Playlist(this.container, this.options);
    },
    onSetCurrent: function(current, previous) {
      var autoPlay, nextUrl, previousUrl;
      previousUrl = previous.data('url');
      nextUrl = current.data('url');
      autoPlay = previousUrl !== nextUrl;
      this.updatePlayer(current, autoPlay);
      this.updateDetails(current);
      previousUrl = previous.data('url');
      nextUrl = current.data('url');
      if (previousUrl !== nextUrl) {
        window.changeLocation(nextUrl);
      }
    },
    updatePlayer: function(item, autoPlay) {
      var mediaUrl, wasPlaying;
      mediaUrl = item.data('direct-url');
      wasPlaying = !this.player.paused;
      if (wasPlaying) {
        this.player.pause();
      }
      this.player.setSrc(mediaUrl);
      if (wasPlaying || autoPlay) {
        this.player.play();
      }
    },
    updateDetails: function(item) {
      var selector, unit, value;
      for (unit in detailUnits) {
        selector = detailUnits[unit];
        value = item.data(unit);
        if (value) {
          this.details.find(selector).html(value);
        }
      }
    },
    next: function() {
      this.playlist.next();
    },
    previous: function() {
      this.playlist.previous();
    },
    sidebarToggled: function() {
      this.triggerResizeEvents(100, 1000);
    },
    triggerResizeEvents: function(interval, duration) {

      /*
      Trigger window resize event every `interval` milliseconds for
      `duration` milliseconds
       */
      var end, resizeFunc, start;
      if (this.resizeTimerId) {
        window.clearInterval(this.resizeTimerId);
      }
      start = Date.now();
      end = start + duration;
      resizeFunc = function() {
        $(window).trigger('resize');
        if (Date.now() >= end) {
          window.clearInterval(this.resizeTimerId);
        }
      };
      resizeFunc = resizeFunc.bind(this);
      this.resizeTimerId = window.setInterval(resizeFunc, 100);
    }
  };
  return window.mediaPlayer = mediaPlayer;
})(this, this.jQuery, this.templates);
