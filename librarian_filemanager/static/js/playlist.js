// Generated by CoffeeScript 1.10.0
(function(window, $) {
  'use strict';
  var MusicPlayer, prepareAudio;
  MusicPlayer = (function() {
    var currentItemClass;

    currentItemClass = 'playlist-list-item-current';

    function MusicPlayer(container1) {
      var i, index, item, len, ref;
      this.container = container1;
      this.audioList = this.container.find('#playlist-list .playlist-list-item');
      this.currentIndex = 0;
      ref = this.audioList;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        item = ref[index];
        if ($(item).hasClass(currentItemClass)) {
          this.currentIndex = index;
          break;
        }
      }
      this.controls = this.container.find('#audio-controls-audio').first();
      this.controls.mediaelementplayer({
        'features': ['prevtrack', 'playpause', 'nexttrack', 'progress', 'duration', 'volume'],
        'success': (function(_this) {
          return function(mediaElement, domElement) {
            _this.player = mediaElement;
            _this.updateAudio(_this.currentIndex);
          };
        })(this)
      });
      this.audioList.on('click', 'a', (function(_this) {
        return function(e) {
          _this.onClick(e);
        };
      })(this));
    }

    MusicPlayer.prototype.updateAudio = function(newIndex) {
      var item;
      this.currentIndex = newIndex;
      item = this.audioList.eq(this.currentIndex);
      this.updatePlaylistState(item);
      this.updatePlayer(item);
    };

    MusicPlayer.prototype.updatePlaylistState = function(item) {
      item.addClass(currentItemClass).siblings().removeClass(currentItemClass);
    };

    MusicPlayer.prototype.updatePlayer = function(item) {
      var audio_url, wasPlaying;
      audio_url = item.data('direct-url');
      wasPlaying = !this.player.paused;
      if (wasPlaying) {
        this.player.pause();
      }
      this.player.setSrc(audio_url);
      if (wasPlaying) {
        this.player.play();
      }
    };

    MusicPlayer.prototype.updateLocation = function() {
      var item, url;
      item = $(this.audioList.get(this.currentIndex));
      url = item.data('url');
      window.history.pushState(null, null, url);
    };

    MusicPlayer.prototype.moveTo = function(index) {
      if (index < 0 || index >= this.audioList.length) {
        return;
      }
      this.updateAudio(index);
      this.updateLocation();
    };

    MusicPlayer.prototype.next = function() {
      var index;
      index = (this.currentIndex + 1) % this.audioList.length;
      return this.moveTo(index);
    };

    MusicPlayer.prototype.previous = function() {
      var index;
      index = (this.audioList.length + this.currentIndex - 1) % this.audioList.length;
      return this.moveTo(index);
    };

    MusicPlayer.prototype.onClick = function(e) {
      var item;
      e.preventDefault();
      e.stopPropagation();
      item = $(e.target).closest('.playlist-list-item');
      this.moveTo(this.audioList.index(item));
      return false;
    };

    return MusicPlayer;

  })();
  prepareAudio = function() {
    var container, player;
    container = $('#playlist-container');
    if (container.length) {
      player = new MusicPlayer(container);
    }
  };
  $(prepareAudio);
  window.onTabChange(prepareAudio);
})(this, this.jQuery);
