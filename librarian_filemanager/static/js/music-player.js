// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function(window, $, templates) {
  'use strict';
  var MusicPlayer, prepareAudio;
  MusicPlayer = (function() {
    function MusicPlayer(container) {
      var currentItemClass, options;
      this.container = container;
      this.onPlayerReady = bind(this.onPlayerReady, this);
      this.onReady = bind(this.onReady, this);
      currentItemClass = 'playlist-list-item-current';
      options = {
        itemSelector: '#playlist-list .playlist-list-item',
        currentItemClass: currentItemClass,
        currentItemSelector: '.' + currentItemClass,
        toggleSidebarOnSelect: false,
        ready: (function(_this) {
          return function() {
            _this.onReady();
          };
        })(this),
        setCurrent: (function(_this) {
          return function(item) {
            _this.onSetCurrent(item);
          };
        })(this)
      };
      this.playlist = new Playlist(this.container, options);
      return;
    }

    MusicPlayer.prototype.onReady = function() {
      this.controls = this.container.find('#audio-controls-audio').first();
      this.controls.mediaelementplayer({
        features: ['playpause', 'progress', 'duration', 'volume'],
        success: (function(_this) {
          return function(mediaElement) {
            _this.onPlayerReady(mediaElement);
          };
        })(this),
        error: (function(_this) {
          return function() {
            _this.controls.prepend(templates.audioLoadFailure);
          };
        })(this)
      });
    };

    MusicPlayer.prototype.onPlayerReady = function(mediaElement) {
      this.player = mediaElement;
      $(this.player).on('mep-ext-playprev', (function(_this) {
        return function() {
          _this.previous();
        };
      })(this));
      $(this.player).on('mep-ext-playnext', (function(_this) {
        return function() {
          _this.next();
        };
      })(this));
    };

    MusicPlayer.prototype.onSetCurrent = function(item) {
      this.updatePlayer(item);
      window.changeLocation(item.data('url'));
    };

    MusicPlayer.prototype.updatePlayer = function(item) {
      var audio_url, wasPlaying;
      audio_url = item.data('direct-url');
      wasPlaying = !this.player.paused;
      if (wasPlaying) {
        this.player.pause();
      }
      this.player.setSrc(audio_url);
      if (wasPlaying) {
        this.player.play();
      }
    };

    MusicPlayer.prototype.next = function() {
      this.playlist.next();
    };

    MusicPlayer.prototype.previous = function() {
      this.playlist.previous();
    };

    return MusicPlayer;

  })();
  prepareAudio = function() {
    var controls, player;
    controls = $('#audio-controls');
    if (!controls.length) {
      return;
    }
    player = new MusicPlayer($("#views-container"));
  };
  $(prepareAudio);
  window.onTabChange(prepareAudio);
})(this, this.jQuery, this.templates);
