// Generated by CoffeeScript 1.10.0
(function(window, $, templates) {
  'use strict';
  var MusicPlayer, prepareAudio;
  MusicPlayer = (function() {
    function MusicPlayer(container1) {
      var options;
      this.container = container1;
      options = {
        itemSelector: '#playlist-list .playlist-list-item',
        currentItemSelector: 'playlist-list-item-current',
        ready: (function(_this) {
          return function() {
            _this.onReady();
          };
        })(this),
        setCurrent: (function(_this) {
          return function(item) {
            _this.onSetCurrent(item);
          };
        })(this)
      };
      this.playlist = new Playlist(this.container, options);
      return;
    }

    MusicPlayer.prototype.onReady = function(func) {
      this.controls = this.container.find('#audio-controls-audio').first();
      return this.controls.mediaelementplayer({
        features: ['prevtrack', 'playpause', 'nexttrack', 'progress', 'duration', 'volume'],
        success: func,
        error: (function(_this) {
          return function() {
            return _this.controls.prepend(templates.audioLoadFailure);
          };
        })(this)
      });
    };

    MusicPlayer.prototype.onSetCurrent = function(item) {
      this.updatePlayer(item);
      window.updateLocation(item.data('url'));
    };

    MusicPlayer.prototype.updatePlayer = function(item) {
      var audio_url, wasPlaying;
      audio_url = item.data('direct-url');
      wasPlaying = !this.controls.paused;
      if (wasPlaying) {
        this.controls.pause();
      }
      this.controls.setSrc(audio_url);
      if (wasPlaying) {
        this.controls.play();
      }
    };

    return MusicPlayer;

  })();
  prepareAudio = function() {
    var container, player;
    container = $('#playlist-container');
    if (container.length) {
      player = new MusicPlayer(container);
    }
  };
  $(prepareAudio);
  window.onTabChange(prepareAudio);
})(this, this.jQuery, this.templates);
