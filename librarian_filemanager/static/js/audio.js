// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

(function(window, $, templates) {
  'use strict';
  var MusicPlayer, playNext, prepareAudio;
  playNext = function(e) {
    var next, player;
    player = e.data;
    next = ($('.playlist-list-item-current')).next('.playlist-list-item');
    if (next.length) {
      player.playlist.next();
      player.player.play();
    }
  };
  MusicPlayer = (function(superClass) {
    extend(MusicPlayer, superClass);

    function MusicPlayer(container) {
      this.onReady = bind(this.onReady, this);
      var features;
      features = {
        toggleSidebarOnSelect: false
      };
      MusicPlayer.__super__.constructor.call(this, container, features);
    }

    MusicPlayer.prototype.onReady = function() {
      this.controls = this.container.find('#audio-controls-audio').first();
      this.controls.mediaelementplayer({
        features: ['playpause', 'progress', 'duration', 'volume'],
        success: (function(_this) {
          return function(mediaElement) {
            _this.onPlayerReady(mediaElement);
          };
        })(this),
        error: (function(_this) {
          return function() {
            _this.controls.prepend(templates.audioLoadFailure);
          };
        })(this)
      });
    };

    return MusicPlayer;

  })(MediaPlayer);
  prepareAudio = function() {
    var controls, player;
    controls = $('#audio-controls');
    if (!controls.length) {
      return;
    }
    player = new MusicPlayer($("#views-container"));
    ($(player.player)).on('ended', player, playNext);
    ($('#audio-controls-albumart')).on('click', function(e) {
      e.preventDefault();
      if (player.player.paused) {
        player.player.play();
      } else {
        player.player.pause();
      }
    });
    ($(window)).on('playlist-updated', function() {
      var artist, title, trackInfo;
      trackInfo = ($('.playlist-list-item-current')).data();
      title = trackInfo.title;
      artist = trackInfo.author || trackInfo.artist || template.unknownAuthor;
      ($('#audio-controls-title h2')).text(title);
      return ($('#audio-controls-title p')).text(artist);
    });
  };
  $(prepareAudio);
  window.onTabChange(prepareAudio);
})(this, this.jQuery, this.templates);
